conflicts in remote origin, force push:  git push -f origin master 
-------------
duplicate repository: copy old repo --> create new repo --> push old into new: result 2 identical repos 
    git clone --bare <old-repository>
    old-repository-project.git > git push --mirror <new-repository>     // pushes copy of old to new 
    old-repository-project.git > cd .. 
       > rm -rf <old-repository-project.git>                  // removes temporary local repository

*************************************************************************************
SHOW GIT SETTINGS           git config --list           --> user.name=slavikshakhov  (and more)
                        !!! git config user.name        --> slavikshakhov

HELP                        git <command> -h            ex. git add -h 
SEE ALL BRANCHES            git branch -a 
DELETE BRANCH               git branch -d <branch>
SEE ALL REPOSITORIES        git remote -v 

CHANGE REPOSITORY           git remote -v      !!! to see existing REPOSITORIES
                            git remote set-url origin <remote url>       !!! origin is name, ex. heroku
CHANGE REPOSITORY'S BRANCH  git branch -M master 
ADD REPOSITORY              git remote add origin <remote url>
REMOVE REFS TO OLD REPOSITORY       git remote rm origin  // ... heroku
SEE ON WHICH LOCAL BRANCH NOW (ex. main, master)      >> git branch --show-current
LOCAL BRANCH REF    >> git show-ref 
REMOVE .git FOLDER FROM PROJ   (gitbash) >> rm -rf .git     --> git init ---- recommit, re-push to new remote repository
------------------
>> git commit -am "...."
>> git push -u origin master    .... git push heroku master     (origin is name of repository)

*****************************************************
error: failed to push some refs to 'github.com:slavikshakhov/checkers_Redux.git'
Method 1: 
    !!! danger (will pull data from last remote commit to local)
    >> git pull --rebase 

Method 2: (go to normal commit in remote, push there, delete all commits after this one)

    GO TO PREVIOUS COMMIT, IGNORE LAST ONE:    A - B - C   
    >> git reset HEAD~1     (now on B)
    >> git reset HEAD~1     (now on A)
    ------
    >> git log    --> list of all commits, choose commit I need
    >> git checkout <ref of needed commit>
    >> git branch    --> list of all branches, if not on master:  >> git checkout master 
    >> git merge <ref of needed commit>
    (now if changes, >> git add .    >> git commit -m "lala"   >> git push    --> pushes after needed commit, ignoring all later ones)
   
****************************************************
CLONE FROM ALTERNATIVE BRANCH  (ex. alternative, vs master)
>> git clone git@github.com:slavikshakhov/checkers_Redux.git -b alternative



