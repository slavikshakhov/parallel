1. install MySql with installer, full (gerK...55    localhost:3306)
2. in MySql command line client >>
    CREATE USER 'slavik'@'localhost' IDENTIFIED BY 'great';          //creates new user
    SELECT user, host FROM mysql.user;                                //shows all users
    GRANT ALL PRIVILEGES ON *.* 'slavik'@'localhost';                 //give user admin privileges
    FLUSH PRIVILEGES;
    SHOW GRANTS FOR 'slavik'@'localhost';                             //show user's privileges
    REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'someuser'@'localhost';
    DROP USER 'someuser'@'localhost';
    exit;                           //to start with my privileges: >>mysgl -u slavik -p
    SHOW DATABASES;
    CREATE DATABASE myDB;
    DROP DATABASE myDB;
    USE myDB;                                        //before using any commands on my
    SHOW TABLES;
    CREATE TABLE users(
        id INT AUTO_INCREMENT,      //unique, incremented
        first_name VARCHAR(100),    //max 255
        last_name VARCHAR(100),
        email VARCHAR(50),
        password VARCHAR(20),
        location VARCHAR(100),
        dept VARCHAR(100),
        is_admin TINYINT(1),
        register_date DATETIME,
        PRIMARY KEY(id)
        );
    DROP TABLE myDB

    DELETE FROM users WHERE id > 0;           //to empty table

    INSERT INTO users (first_name, last_name, email, password, location, dept, is_admin, register_date)
                values ('Brad', 'Traversy', 'brad@gmail.com', '123456','Massachusetts', 'development', 1, now());
    SELECT * FROM users;
    SELECT first_name, last_name FROM users;

    SELECT * FROM users WHERE location='Massachusetts';
    SELECT * FROM users WHERE location='Massachusetts' AND dept='sales';
    SELECT * FROM users WHERE is_admin = 1;
    SELECT * FROM users WHERE is_admin > 0;

    DELETE FROM users WHERE id = 6;                             //delete a row, ex user with id=6
    UPDATE users SET email = 'freddy@gmail.com' WHERE id = 2;     //update a row

    ALTER TABLE users ADD age VARCHAR(3);                      //add a new col
    ALTER TABLE users MODIFY COLUMN age INT(3)                 //change col's dt

    SELECT * FROM users ORDER BY last_name ASC;                 //ordering
    SELECT * FROM users ORDER BY last_name DESC;

    SELECT CONCAT(first_name, ' ', last_name) AS 'Name', dept FROM users;     //make one col from two

    SELECT DISTINCT location FROM users;

    SELECT * FROM users WHERE age BETWEEN 20 AND 25;         //all rows with age col between 20 and 25

    SELECT * FROM users WHERE dept LIKE 'd%';                  //select all by some condition
    SELECT * FROM users WHERE dept LIKE 'dev%';
    SELECT * FROM users WHERE dept LIKE '%t';
    SELECT * FROM users WHERE dept LIKE '%e%';

    SELECT * FROM users WHERE dept NOT LIKE 'd%';             //select all, not falling in this condition

    SELECT * FROM users WHERE dept IN ('design', 'sales');    //select rows with col-a and col-c

    CREATE INDEX LIndex On users(location);          //ex. all users in New York
    DROP INDEX LIndex ON users;

    CREATE TABLE posts(                                    //one to many, FOREIGN KEY
        id INT AUTO_INCREMENT,
        user_id INT,
        title VARCHAR(100),
        body TEXT,
        publish_date DATETIME DEFAULT CURRENT_TIMESTAMP,    //DEFAULT CURRENT_TIMESTAMP is like now()
        PRIMARY KEY(id),
        FOREIGN KEY (user_id) REFERENCES users(id)
        );
    INSERT INTO posts(user_id, title, body)                      //put values into one to many
             VALUES (1, 'Post One', 'This is post one'),
                    (3, 'Post Two', 'This is post two'),
                    (1, 'Post Three', 'This is post three'),
                    (2, 'Post Four', 'This is post four'),
                    (5, 'Post Five', 'This is post five');

    SELECT users.first_name, users.last_name, posts.title, posts.publish_date      //join two tables, return rows that match in both tables
            FROM users
            INNER JOIN posts
            ON users.id = posts.user_id                      //by PRIMARY KEY of users and FOREIGN KEY of posts
            ORDER BY posts.title;

    CREATE TABLE comments(                                  //with 2 foreign keys, related to user, post
            id INT AUTO_INCREMENT,
            post_id INT,
            user_id INT,
            body TEXT,
            publish_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY(id),
            FOREIGN KEY(user_id) references users(id),
            FOREIGN KEY(post_id) references posts(id)
        );

    INSERT INTO comments(post_id, user_id, body)
                VALUES (1, 3, 'This is comment one'),
                        (2, 1, 'This is comment two'),
                        (5, 3, 'This is comment three'),
                        (2, 4, 'This is comment four');

    SELECT comments.body, posts.title, users.first_name, users.last_name      //joint 3 tables
            FROM comments
            INNER JOIN posts on posts.id = comments.post_id
            INNER JOIN users on users.id = comments.user_id
            ORDER BY posts.title;

    SELECT COUNT(id) FROM users;                     //count number of rows with distinct id
    SELECT MAX(age) FROM users;                      //returns maximum value of this col, from all rows
    SELECT MIN(age) FROM users;
    SELECT SUM(age) FROM users;                      //returns sum of all values of this col, from all rows
    SELECT UCASE(first_name), LCASE(last_name) FROM users;     //John brown (all rows in this format)

    SELECT location, COUNT(location) FROM users GROUP BY location;          New York  2, Berlin 3 (all rows in this format)
    SELECT age, COUNT(age) FROM users WHERE age > 20 GROUP BY age;          //filtering by value, then grouping
    SELECT age, COUNT(age) FROM users GROUP BY age HAVING count(age) >=2;


3. in MySql workbench
    schema -> click on myDB - set as default schema
    (now queries can be written in workbench, in query);  to run: ctrl + enter




