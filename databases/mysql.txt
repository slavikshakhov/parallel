1. install MySql with installer, full (gerK...55    localhost:3306)
2. in MySql command line client >>
    CREATE USER 'slavik'@'localhost' IDENTIFIED BY 'great';          //creates new user
    SELECT user, host FROM mysql.user;                                //shows all users
    GRANT ALL PRIVILEGES ON *.* 'slavik'@'localhost';                 //give user admin privileges
    FLUSH PRIVILEGES;
    SHOW GRANTS FOR 'slavik'@'localhost';                             //show user's privileges
    REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'someuser'@'localhost';
    DROP USER 'someuser'@'localhost';
    exit;                           //to start with my privileges: >>mysgl -u slavik -p

    
____________________________________________________________________________________________________________
                                              SHOW

    databases:
        SHOW DATABASES;
    tables:
        SHOW TABLES;
    all rows all cols
        SELECT * FROM users;
    all rows some cols
        SELECT name, age FROM users;

        

    some rows matching one col's value
       SELECT * FROM users WHERE name='Slavik';

       SELECT * FROM users WHERE age BETWEEN 20 AND 25; 

       SELECT * FROM users WHERE dept LIKE 'd%';      // 'dev%';   '%t';  %lala%;

       SELECT * FROM users WHERE dept NOT LIKE 'd%'; 

    some rows matching one col's > 1 value
        SELECT * FROM users WHERE dept IN ('design', 'sales');

    
    some rows matching > 1 cols values
        SELECT * FROM users WHERE age = 25 AND dept='sales';   // age > 18 
    
    
    

                                                    CREATE

    database:
         CREATE DATABASE myDB;

    table:  
    !!! USE myDB;

        CREATE TABLE users(
        id INT AUTO_INCREMENT,      
        PRIMARY KEY(id)
        name VARCHAR(100)
        );

        INSERT INTO users (name) values ('Slavik');

    foreign table: 

        CREATE TABLE posts(                                    
        id INT AUTO_INCREMENT,
        PRIMARY KEY(id),
        user_id INT,
        FOREIGN KEY (user_id) REFERENCES users(id),        //can be > 1 foreign key
        title VARCHAR(100)       
        );

        INSERT INTO posts(user_id, title)                     
             VALUES (1, 'Post One'),
                    (3, 'Post Two');

    !!! ... ,user_id INT, FOREIGN KEY (user_id) REFERENCES users(id) on DELETE CASCADE, ...
    !!! to add on delete cascade to existing foreign key: 
        1. SHOW CREATE TABLE userlanguage;    ->  copy constraint string of foreign key
        2. Alter table userlanguage drop foreign key FK4C5B93445F11A0B7
        3. alter table userlanguage add foreign key (user_id) references users(id) on delete cascade;    

                                            CHANGE EXISTING COL

    insert col in table:
        ALTER TABLE users ADD name VARCHAR(255); 
    change col's dt
        ALTER TABLE users MODIFY COLUMN age INT(3)  

                                                UPDATE VALUE
    one row one col
        UPDATE users SET age = 26 WHERE id = 2;

                                                DELETE
    database:
        DROP DATABASE myDB;

    table:
     !!! USE myDB;
        DROP TABLE myDB

    all rows in table:
        DELETE FROM users WHERE id > 0;  

    one row 
        DELETE FROM users WHERE id = 6; 

    one col
        ALTER TABLE users DROP age;
    
                                                JOIN TABLES
1. join two tables into one M-M ref table
    SELECT userlanguage.id, languages.language, users.name
       FROM userlanguage
       INNER JOIN languages ON userlanguage.language_id = languages.id
       INNER JOIN users ON userlanguage.user_id = users.id;

    !!! here userlanguage is ref table holding user_id, language_id

2. select languages.Name from userofferedlanguage
                 inner join languages on languages.Id = userofferedlanguage.LanguageId and
                     userofferedlanguage.UserId = 2;
       
       !!! entity FW:
            var languages = _context.Languages;
            var userLgs = _context.UserOfferedLanguage;
            var offeredLgs = (
                userLgs.Where(el => el.UserId == id)
                    .Join(languages, ul => ul.LanguageId, lg => lg.Id, (ul, lg) => lg.Name)               
            );
            offeredLgs.ToList();
            === (LINQ)
           
            


2. ref table1 -> ref table 2 -> two tables


    SELECT meetings.time, users.name, languages.language
         FROM meetings 
         INNER JOIN userlanguage ON meetings.userlanguage_id = userlanguage.id  
         INNER JOIN languages ON userlanguage.language_id = languages.id  
         INNER JOIN users ON userlanguage.user_id = users.id 
         ORDER BY languages.language;



    SELECT comments.body, posts.title, users.first_name, users.last_name      //joint 3 tables
            FROM comments
            INNER JOIN posts on posts.id = comments.post_id
            INNER JOIN users on users.id = comments.user_id
            ORDER BY posts.title;

    SELECT users.first_name, users.last_name, posts.title, posts.publish_date      //join two tables, return rows that match in both tables
            FROM users
            INNER JOIN posts
            ON users.id = posts.user_id                      //by PRIMARY KEY of users and FOREIGN KEY of posts
            ORDER BY posts.title;



                                                    ORDERING

    SELECT * FROM users ORDER BY last_name ASC;                
    SELECT * FROM users ORDER BY last_name DESC;

                                                        OTHER

    SELECT CONCAT(first_name, ' ', last_name) AS 'Name', dept FROM users;     //make one col from two

    SELECT DISTINCT location FROM users;    

    CREATE INDEX LIndex On users(location);          //ex. all users in New York
    DROP INDEX LIndex ON users;    
    
    SELECT COUNT(id) FROM users;                     //count number of rows with distinct id
    SELECT MAX(age) FROM users;                      //returns maximum value of this col, from all rows
    SELECT MIN(age) FROM users;
    SELECT SUM(age) FROM users;                      //returns sum of all values of this col, from all rows
    SELECT UCASE(first_name), LCASE(last_name) FROM users;     //John brown (all rows in this format)

    SELECT location, COUNT(location) FROM users GROUP BY location;          New York  2, Berlin 3 (all rows in this format)
    SELECT age, COUNT(age) FROM users WHERE age > 20 GROUP BY age;          //filtering by value, then grouping
    SELECT age, COUNT(age) FROM users GROUP BY age HAVING count(age) >=2;    

    

*********************************************************************************************************************
********************************** DATATIPES ************************************************************************
(time)
    date DATETIME DEFAULT CURRENT_TIMESTAMP    //value - now()
    date TIMESTAMP

(number)
    age INT
(word) 
    name VARCHAR(255)
(text)
    body TEXT
(byte[])
   passwordHash VARBINARY(255)
(boolean) 
    completed BOOLEAN

!!! required:  name VARCHAR(255) NOT NULL
*****************************************************************************************************************
**************************  RELATIONSHIPS ********************************************************************

 

                     
************************************************************************************************************

3. in MySql workbench
    schema -> click on myDB - set as default schema
    (now queries can be written in workbench, in query);  to run: ctrl + enter


*************************************************************************************************************
*********************************** ENTITY FW MySql ***************************************************************
