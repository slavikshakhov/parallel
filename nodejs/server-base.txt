const express = require('express');
const app = express();
const bodyParser = require('body-parser');

var cors = require('cors');



app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Set Public Folder (not if React, Angular)
app.use(express.static(path.join(__dirname, 'public')));

app.use(cors());

// Route Files
let users = require('./routes/users');
app.use('/users', users);

// Start Server
app.listen(3000, function(){
  console.log('Server started on port 3000...');
});


********************************  CRUD ********************************************************************
routes/users.js

const express = require('express');
const router = express.Router();

//get all users
router.get('/', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: err.message })
  }    
});

router.get('/:id', getUser, (req, res) => {
  res.json(res.user);
});

router.post('/', async (req, res) => {
  const {name, city, country} = req.body;
  const user = new User({ name, city, country });
  try {
    const newUser = await user.save();
    res.status(201).json(newUser);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});
//update one
router.patch('/:id', getUser, async (req, res) => {
  const {name, city} = req.body;
  if(name){
    res.user.name = name;
  }
  if(city){
    res.user.city = city;
  }
  try {
    const updatedUser = await res.user.save();
    res.json(updatedUser);
  } catch {    
    res.status(400).json({ message: err.message });
  }  

});
router.delete('/:id', getUser, async (req, res) => {
  try {
    await res.user.remove();
    res.json({message: 'Deleted user'})
  } catch (err){
    res.status(500).json({message: err.message})
  }
});

// middleware to get user, attaches user to res
async function getUser(req, res, next){
  let user;
  try {
    user = await User.findById(req.params.id);
    if(!user){
      return res.status(404).json({message: 'Cannot find user'})
    }
  } catch (err){
    res.status(500).json({ message: err.message });
  }
  res.user = user;
  next();
}

module.exports = router;
___________________________________

!!! see nodejs/data-from-front.txt  (validation, get, post)

!!! res.status(404).json(data);   // preferred format

    (or this format)
    res.send('from server to front');    
    res.sendStatus(403);
    res.json(data);     //data can be "", {}, [], ...


    status codes: 500 -> server error (getting els, ...)  // no errors from front
                  201 -> obj successvully saved in db
                  400 -> error from front .... BadRequest
                  403 -> wrong credentials (password, ...)  ...Forbidden
!!! to hash password, see nodejs/nodejs-hash-check-pw