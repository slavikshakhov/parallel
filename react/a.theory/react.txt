SETUP
JSX
LINKS
REDIRECT
STYLING
EVENTS
REACT FORM
CUSTOM INPUT
REDUX HOOKS
ROUTING
FETCH
                           
                                
                                SETUP

>>npx create-react-app tandem-react   //no Capital letters

1. Folder structure:
        src/assets
        src/components        

2. VS Code extensions
        a. javascript code snippets  //see code-extensions.txt
        b. ES7 React/Redux/Graph ...

************************************************************************************************************
                                    GLOBAL VARS 


(in .env)  REACT_APP_LALA='lala'
process.env.REACT_APP_LALA                  -> lala

!!! must start with REACT_APP_


*************************************************************************************************************
                                JSX
                            
{bool && <p> ..... </p>}
-----------------------------------------
{els.map(el, i) => {
    return (<li key={i} ..... </li>);
}}
----------------------------------------
els.slice(0, 5)     -> first 5 els

-----------------------------------------------------------------------------------------------------------
                                CHILDREN

A comp  ------ B  ->  C
                  ->  D

B comp  ----- div -> E
                  -> {props.children}        // C, D

D comp  ----- div -> F
                  
D's props come directly from A, no need to pass to B first


***********************************************************************************************************
                                PROPS

in CompA (has props), after Comp:

        CompA.defaultProps = { prop1: "lalala" }

*************************************************************************************************************
                                LINKS (to use need to be in App.js routes)



(jsx)
    <Link to="/users">Users</Link>    
    <Link to="/users">
    <Link to='/register'>
        <button ...>Register</button>                                   
    </Link>



************************************************************************************************************
                                    REDIRECT

import { useHistory } from "react-router-dom";
let history = useHistory();

(js)
     history.push('home');                           !!! 'home' is route in App.js

(jsx)
    <button onClick={() => history.goBack()}>Back</button>
    <button onClick={() => history.push("/")}>Home</button>            

************************************************************************************************************
                                 STYLING

<div  className={`burger ${regMode ? 'remove-burger' : ''}`}> ... </div>
 <h1 style={{color: "red"}}> ... </h1>
-------
import StartStyles from "./Start.module.css";
className={`${StartStyles.passwordError} ${StartStyles.errors}`}
className={StartStyles.passwordError}
-------

************************************************************************************************************
                                    EVENTS
(js) 
    function handleClick(e) { e.preventDefault();   .... }
(jsx)
    <button onClick={handleClick}> ... </button>
    <button onClick={() => handleClick()}>

-------------------------------------------------------------------
(js) 
    function funName(n) { ... n ....}
(jsx)
    <button onClick={() => funName(name)}>

-------------------------------------------------------------------

(js) 
    function funName(e, d) { e.preventDefault() ... e.target.value ... d ....}
(jsx)
    <button onClick={(e) => funName(e, data)}>

--------------------------------------------------------------------
(js)
    const [count, setCount] = useState(0);
(jsx)
    <button onClick={() => setCount(1)}> ... </button>

------------------------------------------------------------------
   

<button onClick={() => dispatch({type: 'SET_REGISTER_MODE', payload: true}) } >Register</button>

************************************************************************************************************
                                HOOKS
                                ComponentDidMount()
                                
import React, { useState, useEffect } from 'react';
---------
const [isOnline, setIsOnline] = useState(false);
useEffect(() => ...cb..., []);   
    
    !!! 2nd arg: 
            no 2nd arg -> after mounting and every update calls cb
            []  -> only after mounting calls cb
            [isOnline] -> if val changes -> calls cb

    !!! to change state (update): cb is:  setIsOnline(true)
************************************************************************************************************
                                REACT FORM

import { useForm } from 'react-hook-form';
----
(js)
    const {register, handleSubmit, errors, watch} = useForm();
    const submitForm = (values) => { 
        e.preventDefault();
        ... values.name ....
        ... values.password ...
        ... errors.name ...
    }
    !!! ex.  const user = {name, password};
         
(jsx) 
    <form onSubmit={handleSubmit(submitForm)}>
        <input ... name="name" ref={register({required: true, minLength: 8})} />  
        .....         
        <input type="submit" value="submit" />
    </form>

ref={register({a, b})} where a or b:    (if not satisfied -> errors.name, errors.name.type, ...)

    required: 'mes'
    min: {value: 3, message: 'mes'}
    minLength: 3
    pattern: {value: /...regexpr.../i, message: 'mes'}
    validate: (val) => val === watch('password') || 'mes'     !!! ref from one input to another (by 'name')

js in jsx: 

    errors.name.type === 'required'
    errors.name.message
    errors.email    -> true/false

---------------------------------------------------------------------
                                    ON INPUT onChange
(js)
    import React, { useState } from 'react';

    const [search, setSearch] = useState('');
    useEffect(() => {... search ...});
(jsx)
    <input ... value={search} onChange={(e) => setSearch(e.target.value)} />

----------------------------------------------------------------------
                                        RESET
e.target.reset();    // to reset input

********************************************  EXAMPLE WITH ERROR MESSAGES 
import React from "react";
import { useForm } from "react-hook-form";

const Example = () => {
  const { handleSubmit, register, errors } = useForm();
  const onSubmit = values => console.log(values);       // values.email 

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input
        name="email"
        ref={register({
          required: "Required",
          pattern: {
            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
            message: "invalid email address"
          }
        })}
      />
      {errors.email && errors.email.message}

      <input
        name="username"
        ref={register({
          validate: value => value !== "admin" || "Nice try!"
        })}
      />
      {errors.username && errors.username.message}

      <button type="submit">Submit</button>
    </form>
  );
};
************************************************************************************************************
                                    CUSTOM INPUT

import {useState} from "react";


const Input = (validationRules) => {
    const [value, setValue] = useState('');
    const [touched, setTouched] = useState(false);

    let initialErrors = {...validationRules};

    for(var key in initialErrors){ initialErrors[key] = false; }

    const [errors, setErrors] = useState(initialErrors);

    const validateOnChange = (e) => {
        let errs = {};
        if(Object.keys(validationRules).includes('required')){
            errs.required = e.target.value.length === 0 ? true : false;
        }
        if(Object.keys(validationRules).includes('minLength')){
            errs.minLength = e.target.value.length < validationRules.minLength ? true : false;
        }
        if(Object.keys(validationRules).includes('maxLength')){
            errs.maxLength = e.target.value.length > validationRules.maxLength ? true : false;
        }
        if(Object.keys(validationRules).includes('pattern')){            
            const re = new RegExp(validationRules.pattern);
            console.log(re.test(e.target.value));
            errs.pattern = !re.test(e.target.value);
        }
        setErrors(errs);
   }
    const validateOnBlur = (e) => {
        let errs = {};
        if(Object.keys(validationRules).includes('required')){
            errs.required = e.target.value.length === 0 ? true : false;
        }
        if(Object.keys(validationRules).includes('minLength')){
            errs.minLength = e.target.value.length < validationRules.minLength ? true : false;
        }
        if(Object.keys(validationRules).includes('maxLength')){
            errs.maxLength = e.target.value.length > validationRules.maxLength ? true : false;
        }
        setErrors(errs);
   }

    return {
      touched,
      errors,
      value,
      setValue,
      reset: () => {
          setValue('');
          setTouched(false);
      },
      bind: {
        value,
        onChange: e => {
          setValue(e.target.value);
          if(Object.keys(validationRules).length > 0){
              validateOnChange(e)
          }
        },
        onBlur: e => {
            setTouched(true);
            if(Object.keys(validationRules).length > 0){
                validateOnBlur(e)
            }
        }
      }
    };
  };
  export default Input;
-------------------------------------------------------
import Input from '../../helpers/Input';
let PasswordValidationRules = { required: false, minLength: 3, maxLength: 10 }
const { value:password, bind:bindPassword, reset:resetPassword, touched:passwordTouched, errors:passwordErrors } = Input(PasswordValidationRules);

const invalidPasswordInputRequired = passwordErrors?.required && passwordErrors?.minLength && !passwordErrors?.maxLength;
const invalidPasswordInputShort = (passwordTouched && passwordErrors?.minLength) && !passwordErrors?.required;
const invalidPasswordInputLong = passwordErrors?.maxLength;

(jsx)
     <input type='password' name="password" className='input' autoComplete="off" {...bindPassword} />
        {
            invalidPasswordInputRequired ?
                <div className='invalid-feedback'>
                        Password is required
                </div>
                :
            null
        }
            {
            invalidPasswordInputShort ?
                <div className='invalid-feedback'>
                        Password too short
                </div>
                :
            null
        }
            {
            invalidPasswordInputLong ?
                <div className='invalid-feedback'>
                        Password too long
                </div>
                :
            null
        }

(css)    
    .invalid-feedback {
        color: var(--red-400);
    }

************************************************************************************************************
                                EVENT CH -> PAR

const Par = () => {
  const runEvent = () => { ... };
  return (
           <Ch changeFn={runEvent} />        
  );
};
const Ch = props => {
  const handleSubmit = (event) => {    
    props.changeFn();   
  }
  return (    
      <button onClick={handleSubmit}></button>    
  )

************************************************************************************************************
                                    REDUX HOOKS
(js)
    import {useSelector, useDispatch} from 'react-redux';
    -------
    const dispatch = useDispatch();
    const regMode = useSelector(state => state.userStatus.regMode);

(jsx)
     { regMode ? <div> ... </div> }
     <button onClick={() => dispatch({type: 'SET_REGISTER_MODE', payload: true}) } >Register</button>

(reducers/rootReducer.js)
    import {combineReducers} from 'redux';
    import userStatus from './userStatus';

    const rootReducer = combineReducers({
        userStatus
    });
    export default rootReducer

(reducers/userStatus.js)   

    const defaultState = { regMode: false }
    const userStatus = (state = defaultState, action) => {        
        switch(action.type){
            case "SET_REGISTER_MODE":
                return {...state, regMode: action.payload }            
            ...
            default: return state
        }
    }
    export default userStatus;

(index.js)
   
    import {createStore} from 'redux';
    import rootReducer from './reducers/rootReducer';
    import {Provider} from 'react-redux';    

    const store = createStore(
        rootReducer,
        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
    );

    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));    
    serviceWorker.unregister();





*************************************************************************************************************
                                       CONTEXT 

(DataContext.js)

    import React, { useState, createContext } from "react";   

    export const DataContext = createContext();

    export const DataProvider = (props) => {
        const [la, setLa] = useState(5);       
        
        const fff = (x) => {            
            setLa(x);
            }
        };
        return (
            <DataContext.Provider value={{ la, fff }}>
                {props.children}
            </DataContext.Provider>
        );
    };

--------------------------------------------
wrap components or routes inside    <DataContext> ... </DataContext>

--------------------------------------------
(any wrapped component)

    import React, { useContext } from "react";
    ----------
     const { la, fff } = useContext(DataContext);    // now has access to la, fff

*************************************************************************************************************
                                ADD EL TO DOM WHEN MOUNTS AND REMOVE WHEN UNMOUNTS 

1. data for DOM in DataContext 
2. set data from any component 
3. show DOM el if data (in DataContext);
4. useEffect(() => {
    return () => setData(null)               !!! when unmounting 
    }, []);

*************************************************************************************************************
                                        ROUTING

(App component)
   import { BrowserRouter, Switch, Route, Link } from "react-router-dom";
   ---------------- (in jsx)
   <BrowserRouter>
      <Switch>
        <Route path={"/"} component={Start} />
        <PrivateRoute exact path={"/home"} component={Home} />
        <Redirect from="*" to="/" />
      </Switch>
    </BrowserRouter>


(PrivateRoute.js)

    import React from "react";
    import { Route, Redirect } from "react-router-dom";

    const PrivateRoute = ({ component: Component, path, ...rest }) => {
    let isAuth = false;
    return (
        <Route
            {...rest}
            path={path}
            render={(props) =>
                isAuth ? <Component {...props} /> : <Redirect to={"/start"} />
            }
        />
        );
    };
    export default PrivateRoute;

!!! paths in order:            "/"   
                    exact --- "/la"    
                                "*" component={() => "404 Not found" }


!!! in any comp ---- props.history.push("/lala")
!!! props.match.params 
!!! get query from b: and -> obj:                       !!! https://lala.com/la?xxxxxxxxx  -> xxxxxxxx
            import queryString from 'query-string'
            ----
            queryString.parse(props.location.search)

**********************************************************************************************************
                                            FETCH

const handleSubmit = (e) => {
        e.preventDefault();
        const user = {name, password};        

        const requestOptions = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(user)
        };        
   
        fetch('http://localhost:4000/auth/login', requestOptions)
            .then(resp => resp.json())
            .then(data => {
                ... dispatch, redirect, etc ... 
                }                               
        });
}

!!! to get data on ComponentDidMount:
    import React, { useState, useEffect } from 'react';
    ----------------------
     const [offeredLgs, setOfferedLgs] = useState(null);
     useEffect(() => { ... fetching here ... setOfferedLgs(data)}, [1]);

     !!! without [1]   -> infinite loop
            !!! any data that will not change: 1, etc


*************************************************************************************************************
                        